<!DOCTYPE html>
<html lang="pt-BR">
<head>
  <!-- Google tag (gtag.js) -->
  <meta name="generator" content=
  "HTML Tidy for HTML5 for Linux version 5.8.0">
  <meta charset="UTF-8">
  <title>Gerenciador de Cifras</title>
  <link rel="stylesheet" href=
  "https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css">
  <link rel="stylesheet" href="/stylesheets/site.css">
  <script async src="https://www.googletagmanager.com/gtag/js?id=G-B2FK1BR487"></script>
  <script>
    window.dataLayer = window.dataLayer || [];
    function gtag(){dataLayer.push(arguments);}
    gtag('js', new Date());

    gtag('config', 'G-B2FK1BR487');
  </script>
</head>
<body>
  <h1 class="mb-4">ðŸŽµ Gerenciador de Cifras</h1>
  <div class="mb-4 d-flex gap-3 flex-wrap">
    <div>
      <strong>Cifra:</strong> <button class=
      "btn btn-sm btn-outline-primary me-1" onclick=
      "changeFontSize('cifra', 1)">A+</button> <button class=
      "btn btn-sm btn-outline-primary" onclick=
      "changeFontSize('cifra', -1)">Aâˆ’</button>
    </div>
    <div>
      <strong>Letra:</strong> <button class=
      "btn btn-sm btn-outline-success me-1" onclick=
      "changeFontSize('letra', 1)">A+</button> <button class=
      "btn btn-sm btn-outline-success" onclick=
      "changeFontSize('letra', -1)">Aâˆ’</button>
    </div>
  </div>
  <div id="vip-list">
    <p class="vip-title">ðŸŽ¤ MÃºsicas VIP (Setlist do Dia)</p>
    <div id="vip-cards" class="mb-5"></div>
  </div>
  <div id="musica-lista">
    <%require 'yaml'

      all_musicas = []

      Dir.glob("data/musicas/**/*.{yml,yaml}").each do |file|
        musica = YAML.load_file(file).transform_keys(&:to_sym)
        all_musicas << musica
        print all_musicas
      end

      all_musicas.sort_by! { |m| m[:titulo].downcase }.each_with_index do |musica, index| %>
      <div class="card card-cifra" id="card-<%= index %>"
    data-index="<%= index %>">
      <div class=
      "card-header d-flex justify-content-between align-items-center">
        <strong><%= musica[:titulo] %></strong>
        <div>
          <label><input type="checkbox" class=
          "form-check-input vip-toggle" data-index="<%= index %>">
          VIP</label> <button class=
          "btn btn-sm btn-secondary ms-2 toggle-expand" data-index=
          "<%= index %>">Exibir</button>
        </div>
      </div>
      <div class="card-body d-none" id="body-<%= index %>">
        <div class="row">
          <div class="col-md-6">
            <h6>Cifra:</h6><select class=
            "form-select form-select-sm d-inline w-auto ms-2"
            onchange="transposeCifra(this, <%= index %>)">
              <%(-6..6).each do |i| %>
              <option value="<%= i %>">
                <%= i > 0 ? "+#{i}" : i %>
              </option><%end %>
            </select>
            <pre class="cifra" data-index="<%= index %>" data-original="<%= musica[:cifra] %>">
<%= musica[:cifra] %>
              </pre>
              <p><%= musica[:obs]? musica[:obs] : "" %></p>
          </div>
          <div class="col-md-6">
            <h6>Letra:</h6>
            <pre class="letra"><%= musica[:letra] %></pre>
          </div>
        </div>
      </div>
    </div><%end %>
  </div>
  <script>
      const vipList = document.getElementById("vip-cards");

      // Carregar VIPs salvos
      const savedVips = JSON.parse(localStorage.getItem("vips")) || [];

      function toggleCardExpansion(btn, index) {
        const body = document.getElementById(`body-${index}`);
        body.classList.toggle("d-none");
        btn.textContent = body.classList.contains("d-none") ? "Exibir" : "Ocultar";
      }

      function addCardToVip(card) {
        const clone = card.cloneNode(true);
        const index = card.dataset.index;

        // Rebind botÃµes no clone
        const toggleBtn = clone.querySelector(".toggle-expand");
        const vipCheckbox = clone.querySelector(".vip-toggle");
        toggleBtn.addEventListener("click", () => toggleCardExpansion(toggleBtn, index));
        vipCheckbox.checked = true;
        vipCheckbox.addEventListener("change", () => removeCardFromVip(index));

        vipList.appendChild(clone);
      }

      function removeCardFromVip(index) {
        const vipCards = Array.from(vipList.children);
        vipCards.forEach(c => {
          if (c.dataset.index === index.toString()) {
            c.remove();
          }
        });

        // Procurar o checkbox original e desmarcÃ¡-lo
        const originalCheckbox = document.querySelector(`.card-cifra[data-index="${index}"] .vip-toggle`);
        if (originalCheckbox) {
          originalCheckbox.checked = false;
        }
      }


      function updateLocalStorage() {
        const vips = Array.from(document.querySelectorAll(".vip-toggle"))
          .filter(cb => cb.checked)
          .map(cb => parseInt(cb.dataset.index));
        localStorage.setItem("vips", JSON.stringify(vips));
      }

      // InicializaÃ§Ã£o dos cards
      document.querySelectorAll(".card-cifra").forEach(card => {
        const index = card.dataset.index;
        const checkbox = card.querySelector(".vip-toggle");
        const btn = card.querySelector(".toggle-expand");

        // Marcar se estÃ¡ salvo no localStorage
        if (savedVips.includes(parseInt(index))) {
          checkbox.checked = true;
          addCardToVip(card);
        }

        checkbox.addEventListener("change", () => {
          if (checkbox.checked) {
            addCardToVip(card);
          } else {
            removeCardFromVip(index);
          }
          updateLocalStorage();
        });

        btn.addEventListener("click", () => toggleCardExpansion(btn, index));
      });

      const FONT_KEYS = {
        cifra: "fontSizeCifra",
        letra: "fontSizeLetra"
      };

      function applyFontSize(type) {
        const size = parseInt(localStorage.getItem(FONT_KEYS[type]) || "16");
        document.querySelectorAll("." + type).forEach(el => {
          el.style.fontSize = size + "px";
        });
      }

      function changeFontSize(type, delta) {
        const key = FONT_KEYS[type];
        const current = parseInt(localStorage.getItem(key) || "16");
        const newSize = Math.max(8, Math.min(48, current + delta));
        localStorage.setItem(key, newSize);
        applyFontSize(type);
      }

      // InicializaÃ§Ã£o ao carregar a pÃ¡gina
      applyFontSize("cifra");
      applyFontSize("letra");

      const SEMITONES = [
        "C", "C#", "D", "D#", "E", "F", "F#", "G", "G#", "A", "A#", "B"
      ];

      // EquivalÃªncias para acordes com bemol
      const ENHARMONIC_EQUIV = {
        "Db": "C#",
        "Eb": "D#",
        "Gb": "F#",
        "Ab": "G#",
        "Bb": "A#"
      };

      function formatCifraVisual(cifraText) {
        return cifraText
          .replace(/\^(\d+)/g, "<sup>$1T</sup>")
          .replace(/\[(\d+)T?\]/g, "<sup>$1T</sup>");
      }

      document.addEventListener("DOMContentLoaded", () => {
        document.querySelectorAll(".cifra").forEach(pre => {
          const original = pre.dataset.original;
          pre.innerHTML = formatCifraVisual(original);
        });
      });

      function transposeChord(chord, shift) {
        const match = chord.match(/^([A-G][b#]?)(.*)/);
        if (!match) return chord;

        let [_, root, suffix] = match;
        root = ENHARMONIC_EQUIV[root] || root;

        let index = SEMITONES.indexOf(root);
        if (index === -1) return chord;

        let transposed = SEMITONES[(index + shift + 12) % 12];
        return transposed + suffix;
      }

      function transposeLine(line, shift) {
        // Regex para acordes simples, suspensos, com barra etc.
          return line.replace(/\b([A-G][b#]?(m|sus|dim|aug|add)?[0-9\/#b]*)\b/g, (match) => {
            return transposeChord(match, shift);
          });
      }

      function transposeCifra(selectElement, index) {
        const shift = parseInt(selectElement.value);
        const pre = document.querySelector(`.cifra[data-index="${index}"]`);
        const original = pre.dataset.original;
        const lines = original.split("\n");
        const transposed = lines.map(line => transposeLine(line, shift));
        pre.innerHTML = formatCifraVisual(transposed.join("\n"));
      }
  </script>
</body>
</html>
